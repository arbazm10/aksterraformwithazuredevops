
trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@2
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@2
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'aksterraformdevops'
          backendAzureRmResourceGroupName: 'byterraapp-grp'
          backendAzureRmStorageAccountName: 'teraasa'
          backendAzureRmContainerName: 'prodtfstate'
          backendAzureRmKey: 'terraazuredevops.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@2
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false
- stage: DeployAKSCluster
  jobs:
  - deployment: DeployDevAKSCluster
    displayName: DeployDevAKSCluster
    pool:
      vmImage: 'ubuntu-latest'
    environment: $(DEV_ENVIRONMENT)
    strategy:
     runOnce:
       deploy:
         steps:
         - task: DownloadSecureFile@1
           displayName: Download ssh key
           name: sshkey
           inputs:
             secureFile: 'aks-terraform-devops-ssh-key-ubuntu.pub'
         - task: TerraformCLI@2
           displayName: Terraform Init
           inputs:
             command: 'init'
             workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
             backendType: 'azurerm'
             backendServiceArm: 'aksterraformdevops'
             backendAzureRmResourceGroupName: 'byterraapp-grp'
             backendAzureRmStorageAccountName: 'teraasa'
             backendAzureRmContainerName: 'prodtfstate'
             backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
             allowTelemetryCollection: false
         - task: TerraformCLI@2
           displayName: Terraform Plan
           inputs:
             command: 'plan'
             workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
             environmentServiceName: 'terraform-aks-azurerm-svc-con'
             commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
             allowTelemetryCollection: false
         - task: TerraformCLI@2
           displayName: Terraform Apply
           inputs:
             command: 'apply'
             workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
             environmentServiceName: 'aksterraformdevops'
             providerAzureRmSubscriptionId: '898734ae-50a5-4891-b151-0d0c58eaf0d6'
             commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
             allowTelemetryCollection: false
      